#! /usr/bin/env python3
# vim: expandtab shiftwidth=4 tabstop=4

"""Test the routines in main.py.
   These values were generated from the rust version.
"""

from main import encrypt

#pylint: disable=too-many-locals
def test_feal8(plaintext_value, subkeys, expect):
    assert isinstance(plaintext_value, int)
    assert isinstance(subkeys, list)
    assert len(subkeys) == 16
    assert all(isinstance(value, int) for value in subkeys)
    assert isinstance(expect, int)

    plaintext, key0, key1, key2, key3, key4, key5, key6, key7, key8_11, key12_15, ciphertext = encrypt()

    plaintext.set(plaintext_value)
    key0.set(subkeys[0])
    key1.set(subkeys[1])
    key2.set(subkeys[2])
    key3.set(subkeys[3])
    key4.set(subkeys[4])
    key5.set(subkeys[5])
    key6.set(subkeys[6])
    key7.set(subkeys[7])
    key8_11.set(
        (subkeys[8] << 48) |
        (subkeys[9] << 32) |
        (subkeys[10] << 16) |
        subkeys[11]
    )
    key12_15.set(
        (subkeys[12] << 48) |
        (subkeys[13] << 32) |
        (subkeys[14] << 16) |
        subkeys[15]
    )
    actual = ciphertext.eval()
    label = "success" if actual == expect else "fail"
    subkeystr = ", ".join(f"0x{subkey:04x}" for subkey in subkeys)
    print(f"{label:s}: plaintext: 0x{plaintext_value:016x} subkeys=[{subkeystr:s}] expect=0x{expect:016x} actual=0x{actual:016x}")
#pylint: enable=too-many-locals

def main():
    test_feal8(0x1193c8f1b31ae099, [0xcc75, 0x6c99, 0xad11, 0xdcf5, 0x0e65, 0x3c0f, 0x7ea2, 0x6fbf, 0x4231, 0xd6b2, 0x36e5, 0x06ed, 0xb482, 0xa4a6, 0xafc7, 0x7d5d, ], 0x26083f40db08d83e)
    test_feal8(0x4f12418469bc51ef, [0x5d91, 0xee52, 0x40e1, 0x4df6, 0xfb3c, 0xf859, 0xa0fe, 0x38a8, 0x3124, 0x731e, 0x34e6, 0x3a98, 0xbd3c, 0x4656, 0x9504, 0xfa2d, ], 0xe6666b80f80dc8fb)
    test_feal8(0xfab7f2441450aa94, [0x3eec, 0x99e6, 0xb7c3, 0x21d7, 0x4dac, 0x0513, 0xb8eb, 0x862d, 0x56ef, 0x7786, 0x6810, 0xfb72, 0xa16f, 0x1643, 0x98df, 0xa367, ], 0x84d64481fe402e70)
    test_feal8(0x710c2bf64c2b65fa, [0xfbe4, 0xd8c8, 0x2bf4, 0xe4fa, 0x149c, 0xf9a6, 0x4647, 0x7558, 0x4eee, 0xf2df, 0xd0e5, 0x130f, 0x9571, 0x00dc, 0x57f7, 0x1284, ], 0x57115a965550fb36)
    test_feal8(0xe1c4d6f678d5c30d, [0xa0e3, 0x36d4, 0x8d84, 0x49d1, 0x9d39, 0xad15, 0xcabe, 0xf310, 0x1792, 0x8159, 0x847b, 0xce4e, 0x9170, 0x360b, 0xcc18, 0xe928, ], 0x55e36070b731f4ca)
    test_feal8(0x00ba501f9fc1aaa6, [0x1f7d, 0x01d4, 0x1976, 0xaefa, 0x6c6a, 0xbd4b, 0xef5e, 0x7693, 0xc01c, 0xa834, 0xa7ef, 0xf968, 0x24c6, 0x4cb3, 0x17fa, 0xc6aa, ], 0x26ed110513eaffd9)
    test_feal8(0xb2a42a58cbbffe9b, [0x73ee, 0xbdf4, 0x5a24, 0x6a88, 0xf4af, 0xb68f, 0xcb93, 0xd2c8, 0x7210, 0x834d, 0xb6d7, 0x0a46, 0xcb58, 0xabcd, 0xac5d, 0x8531, ], 0x27fae46a1aec553c)
    test_feal8(0x52d2af75f76d769e, [0x3842, 0xda94, 0xc8b3, 0xd5f8, 0x4b87, 0x58c2, 0xc66b, 0x6fc8, 0x2a85, 0xdfca, 0x70d1, 0xe9aa, 0xd74d, 0x3074, 0x7b81, 0x32dc, ], 0x4ee3bef62e1a4137)
    test_feal8(0xcba3098e82503d65, [0xbf76, 0xecd9, 0xc173, 0xf2af, 0xe65e, 0xca2c, 0xe6de, 0x4da1, 0xf0e9, 0xa84f, 0x52cc, 0x9d82, 0x55b5, 0x3aa5, 0x2565, 0x6138, ], 0x79cc9a5f2bdf8825)
    test_feal8(0xb78c7605f7ba5f4f, [0x0fb8, 0xfba0, 0xf215, 0xb4e6, 0x97f5, 0x3df2, 0xfbca, 0x6770, 0x38a4, 0x29ca, 0xeaab, 0x44b7, 0x553e, 0x0966, 0x3683, 0x3051, ], 0x49dc575b2cabcffc)
    test_feal8(0xf1c3270091e31ee5, [0x5cdd, 0xdf06, 0xd95e, 0x7488, 0xa8f8, 0x1ac8, 0x8142, 0x8d33, 0xf86f, 0x15dd, 0x19ca, 0x6cb6, 0xe8a3, 0xcfa0, 0xe67a, 0x42db, ], 0xf4da6d97bba6b18a)
    test_feal8(0xb511d2345dd29fd6, [0x75c8, 0xfec9, 0xa214, 0x67f8, 0x84ad, 0x36a4, 0xfb94, 0x42a0, 0xd9d7, 0xa792, 0xa0bc, 0xa2d4, 0xbbf5, 0x483f, 0x2fc4, 0x71c6, ], 0xe37aa4ded4712cd3)
    test_feal8(0x0cb35394da02e74a, [0x3e27, 0xef91, 0x081f, 0x5ae1, 0xa378, 0xfa3b, 0xd7f8, 0x8914, 0x6feb, 0x37fb, 0x8a06, 0xc874, 0x2258, 0xc996, 0x46f9, 0x18ab, ], 0x0c1a454ac6a7be7f)
    test_feal8(0x6ed859c96e02aeda, [0xc0fb, 0x0a46, 0x5a3c, 0x64e5, 0xa134, 0xafa0, 0x481d, 0x4d46, 0x22ce, 0xfbe7, 0xdd7b, 0x32f2, 0x23d9, 0x6f0f, 0x48a1, 0xd990, ], 0x6f9452394bda4d1f)
    test_feal8(0xdbcd532f914ea4f2, [0x77bd, 0x5dd6, 0xec8b, 0x0832, 0x7c93, 0x2ac8, 0xf766, 0x0a1d, 0x84a7, 0xb0a1, 0x4e06, 0x25a9, 0x8233, 0x911f, 0xf24f, 0x9d37, ], 0x12969418a486f0f4)
    test_feal8(0x355a97041446493a, [0x9b1c, 0xfce4, 0x1a6c, 0xf988, 0x3a80, 0xce3c, 0x251d, 0xcb72, 0x2922, 0x15b0, 0xe58f, 0x9b2a, 0xfac5, 0xf371, 0xda37, 0x06cb, ], 0xcb40642cbd3167c7)


if __name__ == "__main__":
    main()
