#! /usr/bin/env python3
# vim: expandtab shiftwidth=4 tabstop=4

"""Test the routines in main.py.
   These values were generated from the rust version.
"""

from main import Input, F

def test_f(bval, aval, expect):
    bnode = Input("B", 16)
    anode = Input("A", 32)

    bnode.set(bval)
    anode.set(aval)

    fnode = F(bnode, anode)

    actual = fnode.eval()
    label = "success" if actual == expect else "fail"
    print(f"{label:s}: bval=0x{bval:04x}, aval=0x{aval:08x} expect=0x{expect:08x} actual=0x{actual:08x}")

#pylint: disable=too-many-statements
def main():
    """These tests were generated from the ../src/main.rs"""
    test_f(0x6e41, 0xeadddc74, 0xdf0ddb41)
    test_f(0xec2a, 0x2deee845, 0x2cde956f)
    test_f(0x462f, 0xe2b31e0c, 0xdc554a5d)
    test_f(0x0092, 0xd860f818, 0x12ac7846)
    test_f(0x4a31, 0x180b859b, 0xf82655c7)
    test_f(0x8312, 0x8f90e354, 0x6209ba3c)
    test_f(0x4a90, 0x4e72f242, 0xb25ef9f0)
    test_f(0x57b8, 0x5d3db2d8, 0x1628eb13)
    test_f(0x8d90, 0xdfa21031, 0xa58aec78)
    test_f(0xc92e, 0x038edbe1, 0xa165e51f)
    test_f(0x2bd7, 0xc8734f15, 0x017814a8)
    test_f(0x424c, 0x31355ce9, 0xc801eb57)
    test_f(0x8906, 0xdbf643f6, 0xf061501d)
    test_f(0x3ff0, 0x7e68e06e, 0x80a280bf)
    test_f(0xd4af, 0x503db5a3, 0x74cd1afa)
    test_f(0xfdd3, 0xfc6ef63c, 0x8826fce4)
    test_f(0x6471, 0x5f8a7386, 0xdcd871e3)
    test_f(0xdacf, 0xc17bbf58, 0x9f26394a)
    test_f(0x8cd7, 0xdb8a2cbf, 0x8d8833cf)
    test_f(0x11eb, 0x33a7375b, 0x9d34ee29)
    test_f(0x013b, 0x70ac3903, 0xbf7f0218)
    test_f(0x462f, 0x9b5dd24f, 0x9dccf925)
    test_f(0x844c, 0x92106420, 0x3b3c11c8)
    test_f(0x9a30, 0x905ff951, 0x2dbb4d7e)
    test_f(0x272b, 0x13508390, 0x2676ba2d)
    test_f(0x0419, 0x39a4e7b7, 0x238f636c)
    test_f(0x19f2, 0x8ac11b25, 0x187c211d)
    test_f(0xd1f0, 0xa2fdb242, 0x833ef8ec)
    test_f(0x239f, 0x3ab9145a, 0x0cc96a17)
    test_f(0xe571, 0xc7b8ed43, 0xc2e9239d)
    test_f(0x940a, 0xf5c78362, 0xfc4ad4dc)
    test_f(0xf76b, 0x172db738, 0x87cabacf)
    test_f(0xf521, 0xe3479b8c, 0x142261bb)
    test_f(0xf195, 0x20d6243f, 0xe95aa38f)
    test_f(0x1781, 0xd5eee379, 0xdb21f0a9)
    test_f(0x4c85, 0x127c7c6d, 0xc3dec9dc)
    test_f(0xf4c2, 0xf195460e, 0x756cdbab)
    test_f(0x2a77, 0x31a91526, 0x40df8cce)
    test_f(0x7e87, 0xed7d8013, 0xe70c8052)
    test_f(0xa4b6, 0xbf1c0050, 0xe9bb865f)
    test_f(0xa09d, 0x48acbfa7, 0xcd2bc2a9)
    test_f(0xe876, 0x33859dc6, 0x95327d11)
    test_f(0x886f, 0x4b786fc3, 0x21fd031f)
    test_f(0xa3cc, 0x001d1b8a, 0xc170370b)
    test_f(0x644d, 0xd9e72953, 0x8c4a0669)
    test_f(0x8ca9, 0x9f51e6bf, 0xadccf2ca)
    test_f(0x5afd, 0xca1d6ec8, 0xc5a70847)
    test_f(0x39dc, 0xf2aac7e1, 0x8d71ad3e)
    test_f(0xbaf1, 0xe5d86bce, 0x61731fbb)
    test_f(0x385f, 0xa6e24354, 0xf6177d4b)
    test_f(0x6f04, 0x2d448069, 0x00d303b5)
    test_f(0xf71a, 0x44c7a62c, 0x611492fe)
    test_f(0x6a39, 0xd0be6729, 0x07f1a12f)
    test_f(0x6d1e, 0xfa84faf9, 0xfac48706)
    test_f(0x1032, 0xca7d8f79, 0xedb1d53d)
    test_f(0xb4bd, 0xf638ceaf, 0x4d5de452)
    test_f(0x8264, 0xa05903fb, 0x0060f3bf)
    test_f(0xdf85, 0x0d3d367c, 0x2cfe37d2)
    test_f(0xf962, 0x6af5d89d, 0x923a858c)
    test_f(0x679b, 0x2560d435, 0x6e76c3e7)
    test_f(0x54a3, 0xf7ac1fcc, 0xe702c95a)
    test_f(0xb20d, 0x3a012c97, 0xec01ded9)
    test_f(0x3d79, 0xd7a1d05b, 0x3ff8ab1c)
    test_f(0xc98a, 0x8c97e900, 0x91d8ecb7)
    test_f(0x3fa9, 0x97226de0, 0x55be8bb1)
    test_f(0xfe50, 0x7deb60f5, 0xd4b8f5af)
    test_f(0x2b8f, 0x84ca8046, 0x09be1c8d)
    test_f(0x5b2f, 0x9f5ba443, 0x01a1a5a7)
    test_f(0x93f9, 0x875da5a3, 0xb22590d0)
    test_f(0xe0e9, 0x51cb3ebc, 0xb39b1857)
    test_f(0x4ce8, 0xf5f4af9c, 0x66a4fd6a)
    test_f(0xee75, 0xee9c9e52, 0x1d59486e)
    test_f(0xfec9, 0xe07d0c1e, 0x73fc5ff9)
    test_f(0x3a68, 0x483a50b8, 0xbd279e5d)
    test_f(0xd75b, 0xd9b48ef7, 0x41776679)
    test_f(0xf043, 0x643b19f3, 0x276538b0)
    test_f(0x00f3, 0xfab667a8, 0x802689c8)
    test_f(0xeac6, 0xc55d89bf, 0x498df5d6)
    test_f(0x2065, 0x740b91a2, 0x39dac08d)
    test_f(0xdfc2, 0x42b22504, 0x3a4cbc07)
    test_f(0x1c41, 0x1898d780, 0x9bce9350)
    test_f(0x273a, 0x0bca1eb3, 0x10f942db)
    test_f(0x26d8, 0x51a1f564, 0x47802732)
    test_f(0x064d, 0x70c7f165, 0x7a2e1c0a)
    test_f(0xaaf7, 0xf07dd582, 0x4c230f4a)
    test_f(0xc392, 0x64bfcfe5, 0xae47ff97)
    test_f(0xaede, 0x54a86c9a, 0x05ed54bf)
    test_f(0xfeeb, 0xf193205a, 0xa6b82502)
    test_f(0x84fa, 0xf07d9c91, 0xd304ef06)
    test_f(0x97a8, 0x8607ec86, 0xb767a4ac)
    test_f(0x07fe, 0x4d3254eb, 0xdceaac62)
    test_f(0xb55d, 0x19dc2994, 0x794594a4)
    test_f(0x79c5, 0x0f8a7cdd, 0x5285a716)
    test_f(0x3cc4, 0xaf9c6f35, 0xa5ba615e)
    test_f(0x2d26, 0x4be7abb5, 0xd4ea88f8)
    test_f(0x11f1, 0x9aae44b1, 0x09a8b291)
    test_f(0xadbd, 0xfd6878a4, 0x9d6a2f53)
    test_f(0x7555, 0x2ae56e13, 0xe68fdecb)
    test_f(0x840a, 0xea0e6d87, 0xbf05977c)
    test_f(0x1295, 0x3051cc2f, 0x6fab84d2)
    test_f(0x6b52, 0xbc9702e9, 0x9eeb92f1)
    test_f(0x24a1, 0x579118d0, 0x22316aec)
    test_f(0x3a83, 0x34205f4d, 0xdc035282)
    test_f(0xff3a, 0xf1c7bd47, 0x6c2aabcf)
    test_f(0x88ed, 0x1b957fdb, 0x71412a18)
    test_f(0x857b, 0xba323669, 0x0ac8b374)
    test_f(0x53c9, 0x37f8a7cb, 0x0109ba1a)
    test_f(0x9d92, 0xc6a8fc0c, 0x7c59eeef)
    test_f(0x0ec9, 0x451efdaa, 0x60d3c5c1)
    test_f(0x9e52, 0x721663d6, 0xf78bc982)
    test_f(0xb724, 0xc307e3fe, 0xe5b6bffa)
    test_f(0x9a6f, 0x31663c4a, 0x439fe2b4)
    test_f(0xb8e0, 0x7a8822e2, 0x9cad3768)
    test_f(0xb697, 0xab37fbc9, 0xbb43a3b5)
    test_f(0x2ffa, 0xf9ede6ee, 0xc6b8aa66)
    test_f(0x94de, 0x71a44e06, 0x5363e7bb)
    test_f(0xc1e2, 0x15bd2690, 0x3cfa392b)
    test_f(0x9f81, 0x7b0262af, 0x1dcc6040)
    test_f(0x2e98, 0x01c8d941, 0x92a38e43)
    test_f(0xdf1f, 0xe603a697, 0x2ea54f9f)
    test_f(0x8abc, 0x86b1f3b1, 0xe1f2c3d5)
    test_f(0xbb97, 0x17cb647c, 0xdbdfb9d8)
    test_f(0x31f5, 0x23bec0a2, 0xd011a215)
    test_f(0x158b, 0x0c72ccb4, 0x267dc1d9)
    test_f(0x2b14, 0x85e4e534, 0x17401425)
    test_f(0xd8e4, 0x5c6246d5, 0x5779c366)
    test_f(0x3e77, 0x6f674ace, 0x5ca86ef4)
    test_f(0x6002, 0x229d44ac, 0x352b5404)
    test_f(0xc539, 0x5e10f96b, 0xe8dc1e2a)
    test_f(0xe474, 0x0f3a6917, 0x0a73f534)
    test_f(0xa6e1, 0x88836b4a, 0x05b9e5c0)
    test_f(0xee22, 0x3299dfa9, 0x726afa92)
    test_f(0xac9d, 0x8c27a477, 0x97599e58)
    test_f(0x3eb3, 0xc443b81e, 0x0c3f51c1)
    test_f(0x334e, 0x18035b9c, 0x8bca4dab)
    test_f(0x9f5a, 0x4f85ea11, 0xb8df0250)
    test_f(0xf1e8, 0xf7d7fe32, 0x4bdbffc8)
    test_f(0x6fb8, 0xd210f65d, 0x6707681b)
    test_f(0x9713, 0x6417058c, 0x85fd5eaf)
    test_f(0xa461, 0xe562a008, 0x72b7022c)
    test_f(0x6559, 0x71c62624, 0xa4b84cc5)
    test_f(0x9531, 0x091ecb42, 0xd7ec9257)
    test_f(0xc0b2, 0xc911b761, 0xfaf5651f)
    test_f(0xbac0, 0x85366e2c, 0xde32d2ff)
    test_f(0x5523, 0xc09d6f8c, 0x9f279fb0)
    test_f(0xe2e0, 0x2cf65905, 0x0cd74e51)
    test_f(0xe021, 0x9b10da66, 0xfe2407b9)
    test_f(0x1530, 0x27312587, 0x065ab3ec)
    test_f(0xfea9, 0xcf6f5a54, 0x9f18fe4d)
    test_f(0x27c0, 0xf8101334, 0x5bde1731)
    test_f(0x46f9, 0xbccb70d8, 0x2b0e7d59)
    test_f(0x4fcb, 0x6de91f09, 0x4ca60e60)
    test_f(0xc0d8, 0x3ea6cb97, 0xd677ef1e)
    test_f(0x4cce, 0x3571c5fa, 0x80eb73b9)
    test_f(0xdd8a, 0xa0677df9, 0x11a4ca13)
    test_f(0xca1b, 0xdd966ebb, 0x78413ce3)
    test_f(0x2917, 0xd28d3459, 0x66c7057d)
    test_f(0x3eed, 0x9e1acc86, 0x9c89c01d)
    test_f(0xeabc, 0x4e3d280b, 0xc8e40e68)
    test_f(0x36df, 0x9606eff4, 0x0dadc5ea)
    test_f(0xda17, 0xaa52e41f, 0x9b3ca003)
    test_f(0x532a, 0xb8cc18e3, 0x7ee7e21b)
    test_f(0xc04e, 0x328b5ff7, 0xce819d56)
    test_f(0x94d2, 0x1e3bef6f, 0xb81089e7)
    test_f(0x3d3e, 0x286604bf, 0x3ce7b1c5)
    test_f(0x329d, 0xccf9f858, 0x8715498a)
    test_f(0x0dee, 0x13f13864, 0x768af055)
    test_f(0xcb80, 0xe979900b, 0x1bdde3bf)
    test_f(0x152c, 0x725a6102, 0xa2361664)
    test_f(0x4569, 0x426167a8, 0xd9346b50)
    test_f(0xd7b4, 0xfa0f198b, 0x7c252de6)
    test_f(0x964e, 0x6f9786db, 0xe50a7441)
    test_f(0xba39, 0x30528672, 0x2b9a9d40)
    test_f(0xbaf7, 0x848377e3, 0x20849f0e)
    test_f(0xaf86, 0xa668bd13, 0x432a4975)
    test_f(0xe3c3, 0xbf7929ec, 0xbdb0da1f)
    test_f(0x6a83, 0x32df8516, 0x5262c983)
    test_f(0xc6fd, 0x0e523176, 0x8d553cce)
    test_f(0x5860, 0x71e26e06, 0x13536dd1)
    test_f(0x49ec, 0x6417ecaa, 0xef9705c2)
    test_f(0x5641, 0x89a3d265, 0x59cd0fd5)
    test_f(0x5542, 0xbc3db308, 0xdf3bd067)
    test_f(0x8850, 0xe69b8aa6, 0xbec915f2)
    test_f(0x2158, 0xfedb23a3, 0xd5773d87)
    test_f(0xbfae, 0x2e94f7cb, 0x4262d37e)
    test_f(0x5011, 0xfbf51db3, 0xcd78dc42)
    test_f(0x32de, 0x058bd967, 0xe57453ee)
    test_f(0xc69c, 0x1d27c9fc, 0xde9a0d28)
    test_f(0x7323, 0x012b8ed2, 0xa1679bb9)
    test_f(0x1506, 0x6eb5dc28, 0xd507e740)
    test_f(0xf1c4, 0x7c4e3a6a, 0x7761d709)
    test_f(0x80cb, 0x8797eb72, 0x588f87eb)
    test_f(0xf233, 0x524eb47f, 0xc79f5e7b)
    test_f(0x2e7c, 0xb831334a, 0xb9b6eee4)
    test_f(0x6697, 0x6dc424bc, 0xb37f3adf)
    test_f(0xd7fa, 0xa9d9ba0b, 0xe1cf68d1)
    test_f(0xdc4c, 0x7fbdeec3, 0x06028d45)
    test_f(0x6a30, 0x66bfda62, 0x59f0e111)
    test_f(0x9441, 0xe0ae3f89, 0xac4b094e)
    test_f(0xd47d, 0x6bbc185f, 0x8df8c8a0)
    test_f(0x4427, 0xd86caa45, 0xfae6ba00)
    test_f(0xfccf, 0x5d821f43, 0xecdec524)
    test_f(0xae81, 0xacaa7bf2, 0xc9c63bb8)
    test_f(0xfeb3, 0xa3634e6b, 0xeb57b78c)
    test_f(0xc24d, 0xd6abfb48, 0x43fae3b0)
    test_f(0x662a, 0x5578f9ff, 0xd8e134d0)
    test_f(0x9774, 0x88e26832, 0xe0b07bba)
    test_f(0x4960, 0xdc99228f, 0x1d6be0c1)
    test_f(0x9af8, 0x319eea29, 0xdbc500a8)
    test_f(0x877b, 0xda828b32, 0x918a3191)
    test_f(0xb585, 0x8f64ffbb, 0x3c800507)
    test_f(0x544b, 0x64f0b583, 0x71f8d565)
    test_f(0x8c86, 0xaa157a16, 0x88788982)
    test_f(0x16ab, 0xa32df6b8, 0x72f97bd0)
    test_f(0x2f5a, 0x10dd8f4a, 0x680aa6c7)
    test_f(0xb167, 0x8e218a34, 0xc5e3f29c)
    test_f(0x61d8, 0x81571ac2, 0x8de28b39)
    test_f(0xc7d1, 0xd3d3791a, 0xf2e96e26)
    test_f(0xae24, 0x686d33b6, 0x76355b48)
    test_f(0x9731, 0x2af85b8b, 0x1b9cf506)
    test_f(0xccf4, 0x66fd86a4, 0x78b83a7f)
    test_f(0xf435, 0xa6808b41, 0xc74b29ad)
    test_f(0xad84, 0xb1d7fb15, 0x26d8097c)
    test_f(0x7175, 0x3b044d1a, 0x00c59fea)
    test_f(0xb1f8, 0xc0227dad, 0xc6f16448)
    test_f(0xe80e, 0xca251d26, 0xfaf4a42f)
    test_f(0x66e7, 0xc080142f, 0x330ca34f)
    test_f(0x7206, 0xed48d4c5, 0xb2bf5b84)
    test_f(0x252c, 0xdecd395a, 0xe31aa500)
    test_f(0xa906, 0xda430c90, 0x242f27e2)
    test_f(0x5624, 0x6325f8d0, 0x5f74024f)
    test_f(0xd9df, 0x5b37bcae, 0xa50e6f78)
    test_f(0x336f, 0x019a73be, 0xb82d3ffb)
    test_f(0x3277, 0xf8b47e7d, 0x1fcf0d2e)
    test_f(0x9691, 0x5f2b3bee, 0xef9c83c9)
    test_f(0x77e3, 0x28a05984, 0x80f8d875)
    test_f(0x2379, 0xf58ce509, 0xe2c361ad)
    test_f(0x1c1b, 0x78437179, 0x91ecffe5)
    test_f(0x1e76, 0x44fa5a6c, 0x2f871f32)
    test_f(0x6861, 0xd50a652a, 0xc19b2749)
    test_f(0xd9c5, 0x1a54d5db, 0x9e8d61f4)
    test_f(0x17b9, 0xfd60197d, 0x7aa1f9dd)
    test_f(0x86bf, 0x37e89053, 0x4a5b5fce)
    test_f(0xa9eb, 0xca29d768, 0x217e4bd2)
    test_f(0xd3f4, 0x05f16bb0, 0x895d328f)
    test_f(0x02c4, 0xce6c8f20, 0xfb306e3e)
    test_f(0xfaa3, 0x2b169488, 0x251e7700)
    test_f(0x9d2e, 0x5fdc8e2c, 0x34aee854)
    test_f(0xcd03, 0x2b6cf8bb, 0x692fbde5)
    test_f(0x0f01, 0x33b6531c, 0x6a67d6cf)
    test_f(0x26f1, 0x5a18362f, 0x3e357492)
    test_f(0x2d83, 0xaa1fb792, 0x9afc8a74)
    test_f(0xb127, 0x83ca0d8f, 0xf77a7c30)
    test_f(0xbb2a, 0x5f63b54f, 0x0361c450)
    test_f(0xaa3c, 0x021aab31, 0x9d652c79)
    test_f(0x2341, 0x2ced76d2, 0x3d2320cf)
#pylint: enable=too-many-statements


if __name__ == "__main__":
    main()
